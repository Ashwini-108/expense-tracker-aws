# GitHub Actions CI/CD Pipeline for Expense Tracker
name: CI/CD Pipeline

# Trigger the workflow on push and pull requests to main branch
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Define environment variables
env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: üß™ Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    # Step 2: Set up Python environment
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # Step 3: Cache pip dependencies for faster builds
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Step 4: Install dependencies
    - name: üìö Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit pytest-cov
    
    # Step 5: Lint code with flake8
    - name: üîç Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Step 6: Security check with bandit
    - name: üîí Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
    
    # Step 7: Run tests with coverage
    - name: üß™ Run tests with coverage
      env:
        # Mock AWS credentials for testing
        AWS_ACCESS_KEY_ID: fake_access_key
        AWS_SECRET_ACCESS_KEY: fake_secret_key
        AWS_REGION: us-east-1
        S3_BUCKET_NAME: expense-tracker-ashwini-4
        CLOUDWATCH_LOG_GROUP: test-logs
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    # Step 8: Upload coverage reports to Codecov (optional)
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    # Step 9: Upload test artifacts
    - name: üì§ Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json

  # Job 2: Build and Package (runs after tests pass)
  build:
    name: üèóÔ∏è Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üìö Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -r requirements.txt
    
    - name: üèóÔ∏è Build package
      run: |
        python -m build
    
    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  # Job 3: Integration Tests (optional - with real AWS if needed)
  integration-test:
    name: üîÑ Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[integration]')
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üìö Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üß™ Run integration tests
      env:
        # Use GitHub secrets for real AWS credentials
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        CLOUDWATCH_LOG_GROUP: ${{ secrets.CLOUDWATCH_LOG_GROUP }}
      run: |
        # Run integration tests here if you have them
        python src/expense_tracker.py test

  # Job 4: Deploy (only on main branch)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: üè∑Ô∏è Create Release Tag
      id: create_tag
      run: |
        TAG_NAME="v$(date +'%Y.%m.%d')-${GITHUB_SHA::8}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Tagged as: $TAG_NAME"
    
    - name: üöÄ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag_name }}
        release_name: Release ${{ steps.create_tag.outputs.tag_name }}
        body: |
          ## Changes in this Release
          - Automated release from commit ${{ github.sha }}
          - All tests passed ‚úÖ
          - Code quality checks passed ‚úÖ
          
          ## Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd expense-tracker
          pip install -r requirements.txt
          ```
        draft: false
        prerelease: false
    
    # Optional: Deploy to PyPI (if you want to publish as a package)
    # - name: üêç Publish to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}

  # Job 5: Cleanup (runs after everything)
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: üßπ Cleanup workspace
      run: |
        echo "Cleaning up workspace..."
        rm -rf ./*
        echo "Cleanup completed!"

# Workflow notifications
# You can add Slack/Discord/Email notifications here